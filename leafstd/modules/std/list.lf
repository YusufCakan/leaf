fn get i list (int [a] -> a)
  builtin:get i list

fn remove i list (int [a] -> [a])
  if len list == 0 
    then list 
    else builtin:remove i list

fn head list ([a] -> a) 
  get 0 list
fn tail list ([a] -> a) 
  get (len list - 1) list

fn take n list (int [a] -> [a])
  if n < 1
    then list
    else head list |> take (n - 1) << remove 0 list

fn map_native f list ((a -> b) [a] -> [b]) 
  if len list == 0
    then list
    else (f << head list) |> map #f << remove 0 list

fn map f list ((a -> b) [a] -> [b])
  builtin:map_overwrite #f list

fn foldr f list ((a a -> a) [a] -> a)
  if len list == 0
    // TODO: This should runtime error instead
    then head list
  elif len list == 1
    then head list
  else f (head list) << foldr #f << remove 0 list

fn foldl_native f acc list ((a b -> b) b [a] -> b)
  if len list == 0
    then acc
    else foldl #f (f (head list) acc) << remove 0 list

fn repeat n f (int (a) -> [a])
  if n == 1
    then [f]
    else f |> repeat (n - 1) #f 

fn range from to (int int -> [int])
  if from == to
    then [to]
    else from |> range (from + 1) to
